var documenterSearchIndex = {"docs":
[{"location":"tests.html#Tests","page":"Tests","title":"Tests","text":"","category":"section"},{"location":"tests.html","page":"Tests","title":"Tests","text":"This package is tested via direct comparison between the outputs of original L-BFGS and the GPU accelerated L-BFGS.","category":"page"},{"location":"tests.html#Test-Cases","page":"Tests","title":"Test Cases","text":"","category":"section"},{"location":"tests.html","page":"Tests","title":"Tests","text":"In runtests.jl three test cases are provided. The functionality is tested by optimizing sum of squared differences between the function outputs and a given height, which is provided as user input. Each of the tests is done twice. Firstly for 100 variables and then for 500 variables. This should ensure enough diversity for general function testing.","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"Quadratic SSD tests","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"beginequation\ntextSSD_textquad = sum_i=1^n (x_i^2 - y_i)^2\nendequation","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"Gaussian SSD tests","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"beginequation\ntextSSD_textgauss = sum_i=1^n left( A expleft( -frac(x_i - mu)^22 sigma^2 right) - y_i right)^2\nendequation","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"Gaussian with squared input SSD tests","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"beginequation\ntextSSD_textgauss-sq = sum_i=1^n left( A expleft( -frac(x_i^2 - mu)^22 sigma^2 right) - y_i right)^2\nendequation","category":"page"},{"location":"tests.html","page":"Tests","title":"Tests","text":"You can run test cases as usual with command : test","category":"page"},{"location":"benchmarking.html#Benchmarking-L-BFGS-Optimization-with-and-without-CUDA-Acceleration","page":"Benchmarking","title":"Benchmarking L-BFGS Optimization with and without CUDA Acceleration","text":"","category":"section"},{"location":"benchmarking.html","page":"Benchmarking","title":"Benchmarking","text":"The package evaluates the performance of the L-BFGS optimization method for various functions, both with and without CUDA acceleration. The functions being tested are:","category":"page"},{"location":"benchmarking.html","page":"Benchmarking","title":"Benchmarking","text":"Gaussian Function \nGaussian with Squared Input\nQuadratic Function ","category":"page"},{"location":"benchmarking.html","page":"Benchmarking","title":"Benchmarking","text":"Each function is tested with increasing solution sizes, and the execution time (mean and minimum) for both CPU and GPU implementations is recorded.","category":"page"},{"location":"benchmarking.html","page":"Benchmarking","title":"Benchmarking","text":"The performance is measured using BenchmarkTools, with benchmarking being run on both CPU and GPU (using CUDA). Results, including computation times and minimum values of the objective functions, are stored in a DataFrame format for analysis. The optimization function is selected based on a user string input (f_str), allowing for flexible function testing.","category":"page"},{"location":"abstract.html#Abstract","page":"Abstract","title":"Abstract","text":"","category":"section"},{"location":"abstract.html","page":"Abstract","title":"Abstract","text":"The goal of this package is to provide a GPU implementation of the L-BFGS solver from Optim.jl.","category":"page"},{"location":"abstract.html","page":"Abstract","title":"Abstract","text":"The base L-BFGS is directly used from: Optim.jl L-BFGS Source","category":"page"},{"location":"problem.html#Problem","page":"Problem","title":"Problem","text":"","category":"section"},{"location":"problem.html","page":"Problem","title":"Problem","text":"My core motivation (can show some alternative GPU use) for kernelizing L-BFGS is a real life HEP analysis problem at CERN. As described below, there is a need for an efficient and fast equation solver. The problem is rather difficult and to my current best knowledge it is not open for public yet. However you will have to trust me on this, but it can be reformulated as finding a set of input variables ","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"x_1 x_2  x_n ","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"for which a function reaches a given height (user-specified):","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"f(vecx) = textgiven_height ","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"which translates into:","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"f(vecx) - textgiven_height = 0 ","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"We formulate the objective function as:","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"f_textopt = textSSD(f(vecx) textgiven_height) ","category":"page"},{"location":"problem.html","page":"Problem","title":"Problem","text":"where SSD is the sum of squared differences, making L-BFGS an ideal solver for such problem.","category":"page"},{"location":"solution.html#Solution","page":"Solution","title":"Solution","text":"","category":"section"},{"location":"solution.html","page":"Solution","title":"Solution","text":"The implementation that solves the CUDA incompatibility is in /src/Optim_dispatch.jl.","category":"page"},{"location":"solution.html","page":"Solution","title":"Solution","text":"Key modifications:","category":"page"},{"location":"solution.html","page":"Solution","title":"Solution","text":"Array â†’ CuArray conversion\nAvoiding scalar indexing (as it reduces GPU parallelism)\nCorrectly using broadcasting (.) instead of loops","category":"page"},{"location":"solution.html#Example-fix:","page":"Solution","title":"Example fix:","text":"","category":"section"},{"location":"solution.html","page":"Solution","title":"Solution","text":"x .= x .+ epsilon  # Instead of for loops","category":"page"},{"location":"ack.html","page":"Acknowledgements","title":"Acknowledgements","text":"I would like to thank my cat for his undying support in the last few days. He did not have it easy as I often programmed instead of eating and forgor to give him food as well. He will be given a complementary snack while you are reading this documentation.","category":"page"},{"location":"index.html#L-BFGS-GPU-Documentation","page":"Home","title":"L-BFGS GPU Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to the L-BFGS GPU documentation. This package provides a GPU implementation of the L-BFGS solver from Optim.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"info: Info\nFor installation and usage, see the sections below.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Since L-BFGS GPU is not a registered Julia package, you need to install it directly from its GitHub repository. To do this, open the Julia REPL and run:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/matouon/lbfgsgpu.jl\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Alternatively, you can activate the package in an environment:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.activate(\".\")\nPkg.add(url=\"https://github.com/matouon/lbfgsgpu.jl\")","category":"page"},{"location":"index.html#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To use L-BFGS GPU, first load the package:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using LBFGSGPU","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Then, you can call the solver in the same manner as L-BFGS, but with CuArray instead of Array type of the initial solution. An example use can be seen Example slidebar or in the actual package in /scripts/lbfgs_test.jl","category":"page"},{"location":"index.html#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"L-BFGS GPU requires among others CUDA.jl for GPU acceleration. Ensure you have CUDA installed and properly configured for Julia:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"CUDA\")\nusing CUDA\nCUDA.version()","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Optim.jl Documentation\nCUDA.jl Documentation","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For further assistance, open an issue on the GitHub repository.","category":"page"},{"location":"example.html#Example:-Using-LBFGS-for-Optimization","page":"Example","title":"Example: Using LBFGS for Optimization","text":"","category":"section"},{"location":"example.html","page":"Example","title":"Example","text":"This example demonstrates how to use LBFGS() for optimization in Julia. A random initial solution is generated and a simple quadratic function is then optimized. ","category":"page"},{"location":"example.html#Setup","page":"Example","title":"Setup","text":"","category":"section"},{"location":"example.html","page":"Example","title":"Example","text":"To run this example, ensure you have the required packages installed:","category":"page"},{"location":"example.html","page":"Example","title":"Example","text":"using Pkg\nPkg.add([\"Optim\", \"CUDA\", \"lbfgsgpu\", \"Random\"])","category":"page"},{"location":"example.html","page":"Example","title":"Example","text":"Example code below on minimizing a SSD of 3 quadratic functions (M=3).","category":"page"},{"location":"example.html","page":"Example","title":"Example","text":"using Optim\nusing CUDA\nusing lbfgsgpu\nusing Random\n\n# Randomly initialize solution\nfunction random_init(M::Int, min_r::T, max_r::T) where {T<:Number}\n    return rand(M) .* (max_r - min_r) .+ min_r\nend\n\n# Compute solution using LBFGS\nfunction compute_and_print(f::Function, x0::AbstractVector)\n    res = optimize(f, x0, LBFGS())\n    println(\"Minimum f(x): \", Optim.minimum(res))\n    return Optim.minimizer(res)\nend\n\n# Example function: Quadratic\nfunction f_q(x::AbstractVector, given_height::Number)\n    return sum((x .^ 2 .- given_height) .^ 2)\nend\n\n# Initialize parameters\nM, min_r, max_r = 3, -10, 10\nRandom.seed!(69420)\nx0 = random_init(M, min_r, max_r)\n\ngiven_height = 0.5  # given_height value for function\nf = x -> f_q(x, given_height)\n\n# Run optimization\ncompute_and_print(f, x0)\ncompute_and_print(f, CuArray(x0))","category":"page"}]
}
